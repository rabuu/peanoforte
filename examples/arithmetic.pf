define add-zero<a> (add a 0) = a
define add<a b> (add a (succ b)) = (succ (add a b))

theorem add-assoc<a b c> (add (add a b) c) = (add a (add b c))
induction c {
	base {
		(add (add a b) 0)
		by add-zero
		(add a [b])
		by rev add-zero
		(add a (add b 0))
	}
	step {
		(add (add a b) (succ c))
		by add
		(succ [add (add a b) c])
		by induction
		(succ (add a (add b c)))
		by rev add
		(add a [succ (add b c)])
		by rev add
		(add a (add b (succ c)))
	}
}

theorem add-zero-left<a> (add 0 a) = a
induction a {
	base { (add 0 0) by add-zero 0 }
	step {
		(add 0 (succ a))
		by add
		(succ [add 0 a])
		by induction
		(succ a)
	}
}

theorem add-left<a b> (add (succ a) b) = (succ (add a b))
induction b {
	base {
		(add (succ a) 0)
		by add-zero
		(succ [a])
		by rev add-zero
		(succ (add a 0))
	}
	step {
		(add (succ a) (succ b))
		by add
		(succ [add (succ a) b])
		by induction
		(succ [succ (add a b)])
		by rev add
		(succ (add a (succ b)))
	}
}

theorem add-comm<a b> (add a b) = (add b a)
induction b {
	base {
		(add a 0)
		by add-zero
		a
		by rev add-zero-left
		(add 0 a)
	}
	step {
		(add a (succ b))
		by add
		(succ [add a b])
		by induction
		(succ (add b a))
		by rev add-left
		(add (succ b) a)
	}
}

define mul-zero<a> (mul a 0) = 0
define mul<a b> (mul a (succ b)) = (add a (mul a b))

theorem mul-zero-left<a> (mul 0 a) = 0
induction a {
	base {
		(mul 0 0)
		by mul-zero
		0
	}
	step {
		(mul 0 (succ a))
		by mul
		(add 0 (mul 0 a))
		by add-zero-left
		(mul 0 a)
		by induction
	}
}

theorem mul-one<a> (mul a 1) = a {
	(mul a 1)
	by mul
	(add a [mul a 0])
	by mul-zero
	(add a 0)
	by add-zero
	a
}

theorem mul-one-left<a> (mul 1 a) = a
induction a {
	base {
		(mul 1 0)
		by mul-zero
		0
	}
	step {
		(mul 1 (succ a))
		by mul
		(add 1 [mul 1 a])
		by induction
		(add 1 a)
		by add-left
		(succ [add 0 a])
		by add-zero-left
		(succ a)
	}
}

theorem distr<a b c> (mul a (add b c)) = (add (mul a b) (mul a c))
induction c {
	base {
		(mul a [add b 0])
		by add-zero
		(mul a b)
		by rev add-zero
		(add (mul a b) [0])
		by rev mul-zero
		(add (mul a b) (mul a 0))
	}
	step {
		(mul a [add b (succ c)])
		by add
		(mul a (succ (add b c)))
		by mul
		(add a [mul a (add b c)])
		by induction
		(add a (add (mul a b) (mul a c)))
		by add-comm
		(add (add (mul a b) (mul a c)) a)
		by add-assoc
		(add (mul a b) [add (mul a c) a])
		by rev add-comm
		(add (mul a b) [add a (mul a c)])
		by rev mul
		(add (mul a b) (mul a (succ c)))
	}
}

theorem mul-assoc<a b c> (mul (mul a b) c) = (mul a (mul b c))
induction c {
	base {
		(mul (mul a b) 0)
		by mul-zero
		0
		by rev mul-zero
		(mul a [0])
		by rev mul-zero
		(mul a (mul b 0))
	}
	step {
		(mul (mul a b) (succ c))
		by mul
		(add (mul a b) [mul (mul a b) c])
		by induction
		(add (mul a b) (mul a (mul b c)))
		by rev distr
		(mul a [add b (mul b c)])
		by rev mul
		(mul a (mul b (succ c)))
	}
}

theorem mul-comm<a b> (mul a b) = (mul b a)
induction b {
	base {
		(mul a 0)
		by mul-zero
		0
		by rev mul-zero-left
		(mul 0 a)
	}
	step {
		(mul a (succ b))
		by mul
		(add a [mul a b])
		by induction
		(add a (mul b a))
		todo
		(mul (succ b) a)
	}
}
